#  Copyright (c) 2022. Jonas S
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#  SOFTWARE.

from unittest import TestCase

from static_scan import check_invalid_headers, check_missing_recommended_headers


class Test(TestCase):
    def test_check_invalid_headers_one_result(self):
        headers = {"test": "test-desc"}
        invalid_headers = ["test"]

        result = check_invalid_headers(headers, invalid_headers)

        assert len(result) == 1
        assert "test: test-desc" in result

    def test_check_invalid_headers_no_results(self):
        headers = {"test": "test-desc"}
        invalid_headers = ["test2"]

        result = check_invalid_headers(headers, invalid_headers)

        assert len(result) == 0

    def test_check_invalid_headers(self):
        headers = {"test": "test-desc", "test2": "test2-desc"}
        invalid_headers = ["test", "test2", "test3", "test4"]

        result = check_invalid_headers(headers, invalid_headers)

        assert len(result) == 2
        assert "test: test-desc" in result
        assert "test2: test2-desc" in result

    def test_check_missing_recommended_headers_one_result(self):
        headers = {"test": "test-desc"}
        recommended_headers = ["test2"]

        result = check_missing_recommended_headers(headers, recommended_headers)

        assert len(result) == 1
        assert "test2" in result

    def test_check_missing_recommended_headers_no_results(self):
        headers = {"test2": "test-desc"}
        recommended_headers = ["test2"]

        result = check_missing_recommended_headers(headers, recommended_headers)

        assert len(result) == 0

    def test_check_missing_recommended_headers(self):
        headers = {"test": "test-desc", "test2": "test2-desc"}
        recommended_headers = ["test", "test2", "test3", "test4"]

        result = check_missing_recommended_headers(headers, recommended_headers)

        assert len(result) == 2
        assert "test3" in result
        assert "test4" in result
