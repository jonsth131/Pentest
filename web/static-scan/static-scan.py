#  Copyright 2022 Jonas S
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
#  associated documentation files (the "Software"), to deal in the Software without restriction, including
#  without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to
#  the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all copies or substantial
#  portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
#  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
#  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
#  OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
#  OTHER DEALINGS IN THE SOFTWARE.

import argparse
import json

import requests

OK = "\033[96m"
WARNING = "\033[93m"
FAIL = "\033[91m"
END = "\033[0m"


def read_config():
    with open("static-scan.json") as f:
        return json.load(f)


def check_headers(url: str, invalid_headers, recommended_headers):
    res = requests.get(url)
    for header in res.headers:
        if header in invalid_headers:
            print(f"{FAIL}[-] Invalid header: {header}: {res.headers[header]}{END}")
    for header in recommended_headers:
        if header not in res.headers:
            print(f"{FAIL}[-] Missing recommended header: {header}{END}")


def check_interesting_files(url: str, file, file_names):
    for file_name in file_names:
        res = requests.get(f"{url}/{file_name}")
        if res.status_code == 200:
            print(f"{WARNING}[-] Found file: {file_name}{END}")
            file.write("=" * 80)
            file.write(f"\nFile URL: {res.url}\n")
            file.write("=" * 80)
            file.write("\n")
            file.write(res.content.decode())


def scan(url: str, file):
    config = read_config()
    print(f"{OK}[*] Scanning headers{END}")
    check_headers(url, config["invalidHeaders"], config["recommendedHeaders"])
    print(f"{OK}[*] Checking interesting files{END}")
    check_interesting_files(url, file, config["fileNames"])


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Static web scan")
    parser.add_argument("--url", help="URL to target", required=True)
    parser.add_argument('-w', '--writefile', help="File to write found interesting files to",
                        type=argparse.FileType('w'), default='-')
    args = parser.parse_args()
    scan(args.url, args.writefile)
